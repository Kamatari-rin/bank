server:
  port: 8080

spring:
  application:
    name: gateway

  security:
    oauth2:
      # 1) Ресурс-сервер — принимаем JWT от Keycloak
      resourceserver:
        jwt:
          jwk-set-uri: http://keycloak:8080/realms/bank/protocol/openid-connect/certs
      # 2) OAuth2 Client — нужен для TokenRelay и/или client_credentials
      client:
        provider:
          keycloak:
            # НЕ issuer-uri, чтобы не было discovery к localhost:8082
            token-uri: http://keycloak:8080/realms/bank/protocol/openid-connect/token
            jwk-set-uri: http://keycloak:8080/realms/bank/protocol/openid-connect/certs
        registration:
          # регистрация клиента шлюза в Keycloak
          gateway:
            provider: keycloak
            client-id: gateway
            client-secret: ${GATEWAY_CLIENT_SECRET:changeme}
            authorization-grant-type: client_credentials

  cloud:
    gateway:
      server:
        webflux:
          # Глобальные фильтры шлюза
          default-filters:
            # Чистим подложенные извне заголовки перед добавлением своих
            - RemoveRequestHeader=X-User-Id
            - RemoveRequestHeader=X-User-Name
            # Проксируем access token дальше (вперёд по цепочке)
            - TokenRelay
          # Маршруты
          routes:
            - id: blocker
              uri: http://blocker-service:8080
              predicates:
                - Path=/api/blocker/**
              filters:
                - RewritePath=/api/blocker/(?<segment>.*),/api/${segment}

            - id: notifications-internal
              uri: http://notifications-service:8080
              predicates:
                - Path=/api/notifications/internal/**
              filters:
                - RewritePath=/api/notifications/internal/(?<segment>.*),/api/internal/${segment}

            - id: notifications-public
              uri: http://notifications-service:8080
              predicates:
                - Path=/api/notifications/public/**
              filters:
                - RewritePath=/api/notifications/public/(?<segment>.*),/api/public/${segment}

            - id: cash
              uri: http://cash-service:8080
              predicates:
                - Path=/api/cash/**
              filters:
                - RewritePath=/api/cash/(?<segment>.*),/api/${segment}

            # внутренний путь в Accounts — доступен только сервисам
            - id: accounts-internal
              uri: http://accounts-service:8080
              predicates:
                - Path=/api/accounts/internal/**
              filters:
                - RewritePath=/api/accounts/internal/(?<segment>.*),/api/internal/${segment}

            - id: accounts
              uri: http://accounts-service:8080
              predicates:
                - Path=/api/accounts/**
              filters:
                # /api/accounts/xxx -> /api/xxx
                - RewritePath=/api/accounts/(?<segment>.*),/api/${segment}

            - id: transfer
              uri: http://transfer-service:8080
              predicates:
                - Path=/api/transfer/**
              filters:
                - RewritePath=/api/transfer/(?<segment>.*),/api/${segment}

            - id: exchange
              uri: http://exchange-service:8080
              predicates:
                - Path=/api/exchange/**
              filters:
                - RewritePath=/api/exchange/(?<segment>.*),/api/${segment}

          # Глобальный CORS (для фронта на localhost:3000)
          globalcors:
            add-to-simple-url-handler-mapping: true
            cors-configurations:
              "[/**]":
                allowedOrigins:
                  - "http://localhost:3000"
                allowedMethods:
                  - GET
                  - POST
                  - PUT
                  - DELETE
                  - OPTIONS
                allowedHeaders:
                  - "*"
                allowCredentials: true

management:
  endpoints:
    web:
      exposure:
        include: health,info
