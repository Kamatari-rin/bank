services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 555666
      POSTGRES_DB: bank
    ports:
      - "5432:5432"
    volumes:
      - ./initdb:/docker-entrypoint-initdb.d:ro
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 3s
      retries: 15
    networks: [bank-network]

  db-migrations:
    build:
      context: ./db-migrations
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/bank
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 555666
    networks: [bank-network]
    restart: "no"

  keycloak:
    image: quay.io/keycloak/keycloak:26.2
    command: start-dev
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: password
    ports:
      - "8082:8080"
    networks: [bank-network]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/realms/master"]
      interval: 10s
      timeout: 5s
      retries: 20

  gateway:
    build:
      context: ./gateway
    environment:
      SPRING_APPLICATION_NAME: gateway
      SERVER_PORT: 8080
      JAVA_OPTS: -Xmx768m -Xms512m
      GATEWAY_CLIENT_SECRET: OxoKsibTRkfX9YFivysoOkaLjWh32Hwz
    ports:
      - "8080:8080"
    networks: [bank-network]

  accounts-service:
    build:
      context: ./accounts-service
    depends_on:
      postgres:
        condition: service_healthy
      db-migrations:
        condition: service_completed_successfully
    environment:
      SPRING_APPLICATION_NAME: accounts-service
      JAVA_OPTS: -Xmx768m -Xms512m
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/bank?currentSchema=accounts
      SPRING_DATASOURCE_USERNAME: accounts_service_user
      SPRING_DATASOURCE_PASSWORD: accounts_service_password
      SPRING_JPA_HIBERNATE_DDL_AUTO: validate
      # --- Keycloak Admin ---
      KC_BASE_URL: http://keycloak:8080
      KC_REALM: bank
      KC_CLIENT_ID: accounts-service
      KC_CLIENT_SECRET: esrmqgGyMr98YXxND7Gl0SBXoUTUrPsl
    networks: [bank-network]

  cash-service:
    build:
      context: ./cash-service
    depends_on:
      gateway:
        condition: service_started
      accounts-service:
        condition: service_started
    environment:
      SPRING_APPLICATION_NAME: cash-service
      SERVER_PORT: 8080

      # Ресурс-сервер: проверяем пользовательский JWT (iss = localhost:8082)
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: http://localhost:8082/realms/bank

      # OAuth2 client (client_credentials) — НЕ issuer-uri! прямые endpoint'ы внутрь сети:
      SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_TOKEN_URI: http://keycloak:8080/realms/bank/protocol/openid-connect/token
      SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_JWK_SET_URI: http://keycloak:8080/realms/bank/protocol/openid-connect/certs
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_CASH-SERVICE_CLIENT_ID: cash-service
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_CASH-SERVICE_CLIENT_SECRET: ATKfZYZkZAm7IS4IrJGIeuQoGNSuDItk
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_CASH-SERVICE_AUTHORIZATION_GRANT_TYPE: client_credentials

      ACCOUNTS_BASE_URL: http://gateway:8080

      # --- Keycloak Admin ---
      KC_BASE_URL: http://keycloak:8080
      KC_REALM: bank
      KC_CLIENT_ID: cash-service
      KC_CLIENT_SECRET: ATKfZYZkZAm7IS4IrJGIeuQoGNSuDItk
    networks: [ bank-network ]

  exchange-service:
    build: { context: ./exchange-service }
    environment:
      SPRING_APPLICATION_NAME: exchange-service
      SERVER_PORT: 8080
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI: http://keycloak:8080/realms/bank/protocol/openid-connect/certs
    networks: [ bank-network ]

  exchange-generator-service:
    build: { context: ./exchange-generator-service }
    environment:
      SPRING_APPLICATION_NAME: exchange-generator-service
      SERVER_PORT: 8080
      SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_TOKEN_URI: http://keycloak:8080/realms/bank/protocol/openid-connect/token
      SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_JWK_SET_URI: http://keycloak:8080/realms/bank/protocol/openid-connect/certs
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GENERATOR_CLIENT_ID: exchange-generator
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GENERATOR_CLIENT_SECRET: vhrBAR45NLul2OKWXHnjH8wXOQMMfOlP
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GENERATOR_AUTHORIZATION_GRANT_TYPE: client_credentials
      EXCHANGE_BASE_URL: http://gateway:8080
    networks: [ bank-network ]

  transfer-service:
    build: { context: ./transfer-service }
    depends_on:
      gateway: { condition: service_started }
      accounts-service: { condition: service_started }
      exchange-service: { condition: service_started }
    environment:
      SPRING_APPLICATION_NAME: transfer-service
      SERVER_PORT: 8080
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI: http://keycloak:8080/realms/bank/protocol/openid-connect/certs
      SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_TOKEN_URI: http://keycloak:8080/realms/bank/protocol/openid-connect/token
      SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_JWK_SET_URI: http://keycloak:8080/realms/bank/protocol/openid-connect/certs
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_TRANSFER_CLIENT_ID: transfer-service
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_TRANSFER_CLIENT_SECRET: HGp9JPlchvXfYcyqqvLeZTDZIJOwxFLL
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_TRANSFER_AUTHORIZATION_GRANT_TYPE: client_credentials
      GATEWAY_BASE_URL: http://gateway:8080
    networks: [ bank-network ]

  blocker-service:
    build:
      context: ./blocker-service
    environment:
      SPRING_APPLICATION_NAME: blocker-service
      SERVER_PORT: 8080
    networks: [ bank-network ]

  notifications-service:
    build:
      context: ./notifications-service
    environment:
      SPRING_APPLICATION_NAME: notifications-service
      SERVER_PORT: 8080

      # Ресурс-сервер (принимаем пользовательский JWT от фронта на /public/**)
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI: http://keycloak:8080/realms/bank/protocol/openid-connect/certs

      # Если внутри сервиса где-то понадобится client_credentials
      # SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_TOKEN_URI: http://keycloak:8080/realms/bank/protocol/openid-connect/token
      # SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_JWK_SET_URI: http://keycloak:8080/realms/bank/protocol/openid-connect/certs
      # SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_NOTIFICATIONS_CLIENT_ID: notifications-service
      # SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_NOTIFICATIONS_CLIENT_SECRET: <секрет>
      # SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_NOTIFICATIONS_AUTHORIZATION_GRANT_TYPE: client_credentials
    networks: [ bank-network ]

#  frontend:
#    build:
#      context: ./frontend
#    depends_on:
#      gateway:
#        condition: service_started
#    ports:
#      - "3000:3000"
#    networks: [bank-network]
#    deploy:
#      resources:
#        limits: { cpus: '1.0', memory: 1g }
#        reservations: { cpus: '0.5', memory: 512m }

volumes:
  postgres_data:

networks:
  bank-network:
    driver: bridge
